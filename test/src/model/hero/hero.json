{
	"name": "./test/src/model/hero/hero.ts",
	"functions": [],
	"classes": [
		{
			"name": "HeroDetail",
			"doc": "/**\n * Hero Detail comment before decorators\n * with multiple lines\n */",
			"isInterface": false,
			"typeParameters": [],
			"typeParameterConstraint": [],
			"implements": [],
			"fields": [
				{
					"name": "id",
					"doc": "/** id field comment with no decorators single line */",
					"type": {
						"typeName": "number",
						"nameSpace": "",
						"basicName": "number",
						"typeKind": 0,
						"typeArguments": [],
						"modulePath": null
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": true,
					"decorators": []
				},
				{
					"name": "detail",
					"doc": "/**\n\t * Detail field comment before decorators\n\t * with multiple lines\n\t */",
					"type": {
						"typeName": "string",
						"nameSpace": "",
						"basicName": "string",
						"typeKind": 0,
						"typeArguments": [],
						"modulePath": null
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": false,
					"decorators": [
						{
							"name": "FieldDecorator",
							"arguments": []
						},
						{
							"name": "FieldDecoratorWithAnyParam",
							"arguments": [
								{
									"paramUno": "123",
									"paramDos": false,
									"paramTres": {
										"paramUno": 15,
										"paramDos": "quatro",
										"paramsTre": false,
										"paramsQuatro": "testFunction",
										"paramsCinco": "TestClassWithFunc.func"
									}
								}
							]
						}
					]
				}
			],
			"accessors": [],
			"methods": [],
			"decorators": [
				{
					"name": "ClassDecorator",
					"arguments": []
				},
				{
					"name": "ClassDecoratorWithParam",
					"arguments": ["HeroDetailClass"]
				}
			],
			"annotations": [],
			"extends": [],
			"moduleName": null,
			"annotationOverridings": {}
		},
		{
			"name": "Hero",
			"doc": "/**\n* Hero class documentation after decorators\n* with multiple lines\n*/",
			"isInterface": false,
			"typeParameters": [],
			"typeParameterConstraint": [],
			"implements": [],
			"fields": [
				{
					"name": "id",
					"doc": "/**\n\t * Id field comment after decorators\n\t * with multiple lines\n\t */",
					"type": {
						"typeName": "number",
						"nameSpace": "",
						"basicName": "number",
						"typeKind": 0,
						"typeArguments": [],
						"modulePath": null
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": false,
					"decorators": [
						{
							"name": "FieldDecoratorWithParam",
							"arguments": ["int, primary key"]
						},
						{
							"name": "FieldDecorator",
							"arguments": []
						}
					]
				},
				{
					"name": "name",
					"doc": "/** Name field comment before decorators single line */",
					"type": {
						"typeName": "string",
						"nameSpace": "",
						"basicName": "string",
						"typeKind": 0,
						"typeArguments": [],
						"modulePath": null
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": false,
					"decorators": [
						{
							"name": "FieldDecoratorWith2Params",
							"arguments": [
								"string",
								{
									"required": true,
									"max-length": 128,
									"min-length": 5
								}
							]
						}
					]
				},
				{
					"name": "detail",
					"doc": "/** Name field comment after decorators single line */",
					"type": {
						"typeName": "HeroDetail",
						"nameSpace": "",
						"basicName": "HeroDetail",
						"typeKind": 0,
						"typeArguments": [],
						"modulePath": "./test/src/model/hero/hero.ts"
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": false,
					"decorators": [
						{
							"name": "FieldDecoratorWithParam",
							"arguments": ["external reference"]
						},
						{
							"name": "FieldDecorator",
							"arguments": []
						}
					]
				},
				{
					"name": "details",
					"doc": "",
					"type": {
						"base": {
							"typeName": "HeroDetail",
							"nameSpace": "",
							"basicName": "HeroDetail",
							"typeKind": 0,
							"typeArguments": [],
							"modulePath": "./test/src/model/hero/hero.ts"
						},
						"typeKind": 1
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": false,
					"decorators": [
						{
							"name": "FieldDecoratorWithParam",
							"arguments": ["array of objects from external reference"]
						},
						{
							"name": "FieldDecorator",
							"arguments": []
						}
					]
				},
				{
					"name": "simpleArray",
					"doc": "",
					"type": {
						"base": {
							"typeName": "number",
							"nameSpace": "",
							"basicName": "number",
							"typeKind": 0,
							"typeArguments": [],
							"modulePath": null
						},
						"typeKind": 1
					},
					"annotations": [],
					"valueConstraint": null,
					"optional": false,
					"decorators": [
						{
							"name": "FieldDecorator",
							"arguments": []
						},
						{
							"name": "FieldDecoratorWithFuncParam",
							"arguments": ["() => { console.log('function'); }"]
						},
						{
							"name": "FieldDecoratorWithFuncParam",
							"arguments": ["testFunction"]
						}
					]
				},
				{
					"name": "_foo",
					"doc": "",
					"type": null,
					"annotations": [],
					"valueConstraint": {
						"isCallConstraint": false,
						"value": true
					},
					"optional": false,
					"decorators": []
				},
				{
					"name": "_bar",
					"doc": "",
					"type": null,
					"annotations": [],
					"valueConstraint": {
						"isCallConstraint": false,
						"value": 0
					},
					"optional": false,
					"decorators": []
				},
				{
					"name": "_baz",
					"doc": "",
					"type": null,
					"annotations": [],
					"valueConstraint": {
						"isCallConstraint": false,
						"value": ""
					},
					"optional": false,
					"decorators": []
				}
			],
			"accessors": [
				{
					"name": "foo",
					"direction": 0,
					"doc": "/** Foo documentation */",
					"type": null,
					"decorators": [
						{
							"name": "FieldDecoratorWithParam",
							"arguments": ["array of objects from external reference"]
						}
					]
				},
				{
					"name": "bar",
					"direction": 0,
					"doc": "/** Bar documentation */",
					"type": null,
					"decorators": [
						{
							"name": "FieldDecoratorWithParam",
							"arguments": ["array of objects from external reference"]
						}
					]
				}
			],
			"methods": [],
			"decorators": [
				{
					"name": "ClassDecorator",
					"arguments": []
				},
				{
					"name": "ClassDecoratorWithParam",
					"arguments": ["HeroClass"]
				},
				{
					"name": "FieldDecoratorWithAnyParam",
					"arguments": [
						{
							"samenameintitle": 1,
							"secondItem": "samenameintitle/22"
						}
					]
				},
				{
					"name": "FieldDecoratorWithAnyParam",
					"arguments": [
						{
							"nullable": true,
							"secondItem": "null"
						}
					]
				}
			],
			"annotations": [],
			"extends": [],
			"moduleName": null,
			"annotationOverridings": {}
		}
	],
	"aliases": [],
	"enumDeclarations": [
		{
			"name": "TestEnum",
			"doc": "/** This is a documentation for enum */",
			"members": [
				{
					"name": "foo",
					"doc": "/** test */",
					"value": 1
				},
				{
					"name": "BAR",
					"doc": "/** another */",
					"value": 2
				},
				{
					"name": "Baz",
					"doc": "/** ok */",
					"value": null
				}
			]
		}
	],
	"imports": {},
	"_imports": [
		{
			"clauses": [
				"ClassDecorator",
				"ClassDecoratorWithParam",
				"FieldDecorator",
				"FieldDecoratorWith2Params",
				"FieldDecoratorWithAnyParam",
				"FieldDecoratorWithFuncParam",
				"FieldDecoratorWithParam"
			],
			"absPathNode": [".", "test", "src", "model", "decorator", "decorator"],
			"absPathString": "./test/src/model/decorator/decorator",
			"isNodeModule": false
		},
		{
			"clauses": ["TestClassWithFunc", "testFunction"],
			"absPathNode": [".", "test", "src", "model", "hero", "testFunction"],
			"absPathString": "./test/src/model/hero/testFunction",
			"isNodeModule": false
		}
	]
}
